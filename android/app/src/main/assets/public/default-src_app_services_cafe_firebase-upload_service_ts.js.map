{"version":3,"file":"default-src_app_services_cafe_firebase-upload_service_ts.js","mappings":"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SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uEAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+DAAgB;AAC9C;AACA,qBAAqB,kEAAe;AACpC,8CAA8C;AAC9C;AACA;AACA;AACA,wCAAwC,0DAAW,qBAAqB,uDAAQ;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAY;AAC3B;AACA;AACA;AACA,kBAAkB,wEAAqB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAgB;AAClC;AACA,mCAAmC,sDAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAgB;AAClC;AACA;AACA,YAAY,oEAAqB;AACjC;AACA;AACA,kBAAkB,mEAAgB;AAClC;AACA,mCAAmC,sDAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,QAAQ,yEAAsB;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB;AACvD;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAU;AAC7B,mBAAmB,yDAAU;AAC7B,oBAAoB;AACpB;AACA;AACA;AACA,4CAA4C,0DAAS;AACrD;AACA;AACA;AACA;AACA,gBAAgB,4DAAQ;;AAEG","sources":["./node_modules/@angular/fire/fesm2015/angular-fire-compat-storage.js","./node_modules/firebase/compat/storage/dist/index.esm.js","./src/app/services/cafe/firebase-upload.service.ts","./node_modules/@firebase/storage-compat/dist/esm/index.esm2017.js"],"sourcesContent":["import { Observable, of, from } from 'rxjs';\nimport { debounceTime, map, switchMap, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/fire';\nimport { observeOutsideAngular, keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, Pipe, NgModule } from '@angular/core';\nimport { ɵfirebaseAppFactory, ɵcacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport 'firebase/compat/storage';\nimport * as i2 from '@angular/fire/app-check';\nimport { AsyncPipe } from '@angular/common';\nimport * as i2$1 from '@angular/platform-browser';\nimport { makeStateKey } from '@angular/platform-browser';\nimport firebase from 'firebase/compat/app';\n\n// Things aren't working great, I'm having to put in a lot of work-arounds for what\n// appear to be Firebase JS SDK bugs https://github.com/firebase/firebase-js-sdk/issues/4158\nfunction fromTask(task) {\n    return new Observable(subscriber => {\n        const progress = (snap) => subscriber.next(snap);\n        const error = e => subscriber.error(e);\n        const complete = () => subscriber.complete();\n        // emit the current snapshot, so they don't have to wait for state_changes\n        // to fire next... this is stale if the task is no longer running :(\n        progress(task.snapshot);\n        const unsub = task.on('state_changed', progress);\n        // it turns out that neither task snapshot nor 'state_changed' fire the last\n        // snapshot before completion, the one with status 'success\" and 100% progress\n        // so let's use the promise form of the task for that\n        task.then(snapshot => {\n            progress(snapshot);\n            complete();\n        }, e => {\n            // TODO investigate, again this is stale, we never fire a canceled or error it seems\n            progress(task.snapshot);\n            error(e);\n        });\n        // on's type if Function, rather than () => void, need to wrap\n        return function unsubscribe() {\n            unsub();\n        };\n    }).pipe(\n    // deal with sync emissions from first emitting `task.snapshot`, this makes sure\n    // that if the task is already finished we don't emit the old running state\n    debounceTime(0));\n}\n\n/**\n * Create an AngularFireUploadTask from a regular UploadTask from the Storage SDK.\n * This method creates an observable of the upload and returns on object that provides\n * multiple methods for controlling and monitoring the file upload.\n */\nfunction createUploadTask(task) {\n    const inner$ = fromTask(task);\n    return {\n        task,\n        then: task.then.bind(task),\n        catch: task.catch.bind(task),\n        pause: task.pause.bind(task),\n        cancel: task.cancel.bind(task),\n        resume: task.resume.bind(task),\n        snapshotChanges: () => inner$,\n        percentageChanges: () => inner$.pipe(map(s => s.bytesTransferred / s.totalBytes * 100))\n    };\n}\n\n/**\n * Create an AngularFire wrapped Storage Reference. This object\n * creates observable methods from promise based methods.\n */\nfunction createStorageRef(ref) {\n    return {\n        getDownloadURL: () => of(undefined).pipe(observeOutsideAngular, switchMap(() => ref.getDownloadURL()), keepUnstableUntilFirst),\n        getMetadata: () => of(undefined).pipe(observeOutsideAngular, switchMap(() => ref.getMetadata()), keepUnstableUntilFirst),\n        delete: () => from(ref.delete()),\n        child: (path) => createStorageRef(ref.child(path)),\n        updateMetadata: (meta) => from(ref.updateMetadata(meta)),\n        put: (data, metadata) => {\n            const task = ref.put(data, metadata);\n            return createUploadTask(task);\n        },\n        putString: (data, format, metadata) => {\n            const task = ref.putString(data, format, metadata);\n            return createUploadTask(task);\n        },\n        list: (options) => from(ref.list(options)),\n        listAll: () => from(ref.listAll())\n    };\n}\n\nconst BUCKET = new InjectionToken('angularfire2.storageBucket');\nconst MAX_UPLOAD_RETRY_TIME = new InjectionToken('angularfire2.storage.maxUploadRetryTime');\nconst MAX_OPERATION_RETRY_TIME = new InjectionToken('angularfire2.storage.maxOperationRetryTime');\nconst USE_EMULATOR = new InjectionToken('angularfire2.storage.use-emulator');\n/**\n * AngularFireStorage Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for uploading and downloading binary files from Cloud Storage for\n * Firebase.\n */\nclass AngularFireStorage {\n    constructor(options, name, storageBucket, \n    // tslint:disable-next-line:ban-types\n    platformId, zone, schedulers, maxUploadRetryTime, maxOperationRetryTime, _useEmulator, _appCheckInstances) {\n        const app = ɵfirebaseAppFactory(options, zone, name);\n        this.storage = ɵcacheInstance(`${app.name}.storage.${storageBucket}`, 'AngularFireStorage', app.name, () => {\n            const storage = zone.runOutsideAngular(() => app.storage(storageBucket || undefined));\n            const useEmulator = _useEmulator;\n            if (useEmulator) {\n                storage.useEmulator(...useEmulator);\n            }\n            if (maxUploadRetryTime) {\n                storage.setMaxUploadRetryTime(maxUploadRetryTime);\n            }\n            if (maxOperationRetryTime) {\n                storage.setMaxOperationRetryTime(maxOperationRetryTime);\n            }\n            return storage;\n        }, [maxUploadRetryTime, maxOperationRetryTime]);\n    }\n    ref(path) {\n        return createStorageRef(this.storage.ref(path));\n    }\n    refFromURL(path) {\n        return createStorageRef(this.storage.refFromURL(path));\n    }\n    upload(path, data, metadata) {\n        const storageRef = this.storage.ref(path);\n        const ref = createStorageRef(storageRef);\n        return ref.put(data, metadata);\n    }\n}\nAngularFireStorage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorage, deps: [{ token: FIREBASE_OPTIONS }, { token: FIREBASE_APP_NAME, optional: true }, { token: BUCKET, optional: true }, { token: PLATFORM_ID }, { token: i0.NgZone }, { token: i1.ɵAngularFireSchedulers }, { token: MAX_UPLOAD_RETRY_TIME, optional: true }, { token: MAX_OPERATION_RETRY_TIME, optional: true }, { token: USE_EMULATOR, optional: true }, { token: i2.AppCheckInstances, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nAngularFireStorage.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorage, providedIn: 'any' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorage, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'any'\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [FIREBASE_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [FIREBASE_APP_NAME]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [BUCKET]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.NgZone }, { type: i1.ɵAngularFireSchedulers }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAX_UPLOAD_RETRY_TIME]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAX_OPERATION_RETRY_TIME]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [USE_EMULATOR]\n                }] }, { type: i2.AppCheckInstances, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/** to be used with in combination with | async */\nclass GetDownloadURLPipe {\n    constructor(storage, cdr, state) {\n        this.storage = storage;\n        this.state = state;\n        this.asyncPipe = new AsyncPipe(cdr);\n    }\n    transform(path) {\n        var _a;\n        if (path !== this.path) {\n            this.path = path;\n            const key = makeStateKey(`|getDownloadURL|${path}`);\n            const existing = (_a = this.state) === null || _a === void 0 ? void 0 : _a.get(key, undefined);\n            this.downloadUrl$ = existing ? of(existing) : this.storage.ref(path).getDownloadURL().pipe(tap(it => { var _a; return (_a = this.state) === null || _a === void 0 ? void 0 : _a.set(key, it); }));\n        }\n        return this.asyncPipe.transform(this.downloadUrl$);\n    }\n    ngOnDestroy() {\n        this.asyncPipe.ngOnDestroy();\n    }\n}\nGetDownloadURLPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipe, deps: [{ token: AngularFireStorage }, { token: i0.ChangeDetectorRef }, { token: i2$1.TransferState, optional: true }], target: i0.ɵɵFactoryTarget.Pipe });\nGetDownloadURLPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipe, name: \"getDownloadURL\", pure: false });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'getDownloadURL',\n                    pure: false,\n                }]\n        }], ctorParameters: function () { return [{ type: AngularFireStorage }, { type: i0.ChangeDetectorRef }, { type: i2$1.TransferState, decorators: [{\n                    type: Optional\n                }] }]; } });\nclass GetDownloadURLPipeModule {\n}\nGetDownloadURLPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGetDownloadURLPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipeModule, declarations: [GetDownloadURLPipe], exports: [GetDownloadURLPipe] });\nGetDownloadURLPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: GetDownloadURLPipeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [GetDownloadURLPipe],\n                    exports: [GetDownloadURLPipe],\n                }]\n        }] });\n\nclass AngularFireStorageModule {\n    constructor() {\n        firebase.registerVersion('angularfire', VERSION.full, 'gcs-compat');\n    }\n}\nAngularFireStorageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAngularFireStorageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorageModule, exports: [GetDownloadURLPipeModule] });\nAngularFireStorageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorageModule, providers: [AngularFireStorage], imports: [GetDownloadURLPipeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireStorageModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [GetDownloadURLPipeModule],\n                    providers: [AngularFireStorage]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireStorage, AngularFireStorageModule, BUCKET, GetDownloadURLPipe, GetDownloadURLPipeModule, MAX_OPERATION_RETRY_TIME, MAX_UPLOAD_RETRY_TIME, USE_EMULATOR, createStorageRef, createUploadTask, fromTask };\n","import '@firebase/storage-compat';\n","import { Injectable } from '@angular/core';\nimport { AngularFireStorage } from '@angular/fire/compat/storage';\nimport {Auth, user} from '@angular/fire/auth';\nimport {AuthService} from \"../auth/auth.service\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FirebaseUploadService {\n  location = 'uploads/';\n  private uid = this.ionicAuthService.getUid();\n  constructor(private angularFireStorage: AngularFireStorage,\n              private ionicAuthService: AuthService) {}\n\n  /* Image name generator time */\n  imageName() {\n    const newTime = Math.floor(Date.now() / 1000);\n    return Math.floor(Math.random() * 20) + newTime;\n  }\n\n  async storeImage(imageData: any) {\n    try {\n      const imageName = this.imageName();\n      return new Promise((resolve, reject) => {\n        const pictureRef = this.angularFireStorage.ref(this.location + `${this.uid}` + imageName);\n        pictureRef\n          .put(imageData)\n          // eslint-disable-next-line prefer-arrow/prefer-arrow-functions\n          .then(function() {\n            pictureRef.getDownloadURL().subscribe((url: any) => {\n              resolve(url);\n            });\n          })\n          .catch((error) => {\n            reject(error);\n          });\n      });\n    } catch (e) {}\n  }\n}\n","import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, StringFormat, _dataFromString, _UploadTask, _FbsBlob, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskSnapshotCompat {\r\n    constructor(_delegate, task, ref) {\r\n        this._delegate = _delegate;\r\n        this.task = task;\r\n        this.ref = ref;\r\n    }\r\n    get bytesTransferred() {\r\n        return this._delegate.bytesTransferred;\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get state() {\r\n        return this._delegate.state;\r\n    }\r\n    get totalBytes() {\r\n        return this._delegate.totalBytes;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskCompat {\r\n    constructor(_delegate, _ref) {\r\n        this._delegate = _delegate;\r\n        this._ref = _ref;\r\n        this.cancel = this._delegate.cancel.bind(this._delegate);\r\n        this.catch = this._delegate.catch.bind(this._delegate);\r\n        this.pause = this._delegate.pause.bind(this._delegate);\r\n        this.resume = this._delegate.resume.bind(this._delegate);\r\n    }\r\n    get snapshot() {\r\n        return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\r\n    }\r\n    then(onFulfilled, onRejected) {\r\n        return this._delegate.then(snapshot => {\r\n            if (onFulfilled) {\r\n                return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\r\n            }\r\n        }, onRejected);\r\n    }\r\n    on(type, nextOrObserver, error, completed) {\r\n        let wrappedNextOrObserver = undefined;\r\n        if (!!nextOrObserver) {\r\n            if (typeof nextOrObserver === 'function') {\r\n                wrappedNextOrObserver = (taskSnapshot) => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\r\n            }\r\n            else {\r\n                wrappedNextOrObserver = {\r\n                    next: !!nextOrObserver.next\r\n                        ? (taskSnapshot) => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref))\r\n                        : undefined,\r\n                    complete: nextOrObserver.complete || undefined,\r\n                    error: nextOrObserver.error || undefined\r\n                };\r\n            }\r\n        }\r\n        return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\r\n    }\r\n}\n\nclass ListResultCompat {\r\n    constructor(_delegate, _service) {\r\n        this._delegate = _delegate;\r\n        this._service = _service;\r\n    }\r\n    get prefixes() {\r\n        return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get items() {\r\n        return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get nextPageToken() {\r\n        return this._delegate.nextPageToken || null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ReferenceCompat {\r\n    constructor(_delegate, storage) {\r\n        this._delegate = _delegate;\r\n        this.storage = storage;\r\n    }\r\n    get name() {\r\n        return this._delegate.name;\r\n    }\r\n    get bucket() {\r\n        return this._delegate.bucket;\r\n    }\r\n    get fullPath() {\r\n        return this._delegate.fullPath;\r\n    }\r\n    toString() {\r\n        return this._delegate.toString();\r\n    }\r\n    /**\r\n     * @returns A reference to the object obtained by\r\n     * appending childPath, removing any duplicate, beginning, or trailing\r\n     * slashes.\r\n     */\r\n    child(childPath) {\r\n        const reference = _getChild(this._delegate, childPath);\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    get root() {\r\n        return new ReferenceCompat(this._delegate.root, this.storage);\r\n    }\r\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\r\n    get parent() {\r\n        const reference = this._delegate.parent;\r\n        if (reference == null) {\r\n            return null;\r\n        }\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data - The blob to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    put(data, metadata) {\r\n        this._throwIfRoot('put');\r\n        return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\r\n    }\r\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param value - The string to upload.\r\n     * @param format - The format of the string to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    putString(value, format = StringFormat.RAW, metadata) {\r\n        this._throwIfRoot('putString');\r\n        const data = _dataFromString(format, value);\r\n        const metadataClone = Object.assign({}, metadata);\r\n        if (metadataClone['contentType'] == null && data.contentType != null) {\r\n            metadataClone['contentType'] = data.contentType;\r\n        }\r\n        return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\r\n    }\r\n    /**\r\n     * List all items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * This is a helper method for calling list() repeatedly until there are\r\n     * no more results. The default pagination size is 1000.\r\n     *\r\n     * Note: The results may not be consistent if objects are changed while this\r\n     * operation is running.\r\n     *\r\n     * Warning: listAll may potentially consume too many resources if there are\r\n     * too many results.\r\n     *\r\n     * @returns A Promise that resolves with all the items and prefixes under\r\n     *  the current storage reference. `prefixes` contains references to\r\n     *  sub-directories and `items` contains references to objects in this\r\n     *  folder. `nextPageToken` is never returned.\r\n     */\r\n    listAll() {\r\n        return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * List items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * List API is only available for Firebase Rules Version 2.\r\n     *\r\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n     * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n     *\r\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n     * support objects whose paths end with \"/\" or contain two consecutive\r\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n     * list() may fail if there are too many unsupported objects in the bucket.\r\n     *\r\n     * @param options - See ListOptions for details.\r\n     * @returns A Promise that resolves with the items and prefixes.\r\n     * `prefixes` contains references to sub-folders and `items`\r\n     * contains references to objects in this folder. `nextPageToken`\r\n     * can be used to get the rest of the results.\r\n     */\r\n    list(options) {\r\n        return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * A `Promise` that resolves with the metadata for this object. If this\r\n     * object doesn't exist or metadata cannot be retreived, the promise is\r\n     * rejected.\r\n     */\r\n    getMetadata() {\r\n        return getMetadata(this._delegate);\r\n    }\r\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata - The new metadata for the object.\r\n     * Only values that have been explicitly set will be changed. Explicitly\r\n     * setting a value to null will remove the metadata.\r\n     * @returns A `Promise` that resolves\r\n     * with the new metadata for this object.\r\n     * @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\r\n    updateMetadata(metadata) {\r\n        return updateMetadata(this._delegate, metadata);\r\n    }\r\n    /**\r\n     * @returns A `Promise` that resolves with the download\r\n     * URL for this object.\r\n     */\r\n    getDownloadURL() {\r\n        return getDownloadURL(this._delegate);\r\n    }\r\n    /**\r\n     * Deletes the object at this location.\r\n     * @returns A `Promise` that resolves if the deletion succeeds.\r\n     */\r\n    delete() {\r\n        this._throwIfRoot('delete');\r\n        return deleteObject(this._delegate);\r\n    }\r\n    _throwIfRoot(name) {\r\n        if (this._delegate._location.path === '') {\r\n            throw _invalidRootOperation(name);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\r\nclass StorageServiceCompat {\r\n    constructor(app, _delegate) {\r\n        this.app = app;\r\n        this._delegate = _delegate;\r\n    }\r\n    get maxOperationRetryTime() {\r\n        return this._delegate.maxOperationRetryTime;\r\n    }\r\n    get maxUploadRetryTime() {\r\n        return this._delegate.maxUploadRetryTime;\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\r\n    ref(path) {\r\n        if (isUrl(path)) {\r\n            throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, path), this);\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\r\n    refFromURL(url) {\r\n        if (!isUrl(url)) {\r\n            throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\r\n        }\r\n        try {\r\n            _Location.makeFromUrl(url, this._delegate.host);\r\n        }\r\n        catch (e) {\r\n            throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, url), this);\r\n    }\r\n    setMaxUploadRetryTime(time) {\r\n        this._delegate.maxUploadRetryTime = time;\r\n    }\r\n    setMaxOperationRetryTime(time) {\r\n        this._delegate.maxOperationRetryTime = time;\r\n    }\r\n    useEmulator(host, port, options = {}) {\r\n        connectStorageEmulator(this._delegate, host, port, options);\r\n    }\r\n}\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\n\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.1.10\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage-compat';\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    // Dependencies\r\n    const app = container.getProvider('app-compat').getImmediate();\r\n    const storageExp = container\r\n        .getProvider('storage')\r\n        .getImmediate({ identifier: url });\r\n    const storageServiceCompat = new StorageServiceCompat(app, storageExp);\r\n    return storageServiceCompat;\r\n}\r\nfunction registerStorage(instance) {\r\n    const namespaceExports = {\r\n        // no-inline\r\n        TaskState: _TaskState,\r\n        TaskEvent: _TaskEvent,\r\n        StringFormat,\r\n        Storage: StorageServiceCompat,\r\n        Reference: ReferenceCompat\r\n    };\r\n    instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps(namespaceExports)\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterStorage(firebase);\n\nexport { registerStorage };\n"],"names":["Observable","of","from","debounceTime","map","switchMap","tap","i1","observeOutsideAngular","keepUnstableUntilFirst","VERSION","i0","InjectionToken","PLATFORM_ID","Injectable","Inject","Optional","Pipe","NgModule","ɵfirebaseAppFactory","ɵcacheInstance","FIREBASE_OPTIONS","FIREBASE_APP_NAME","i2","AsyncPipe","i2$1","makeStateKey","firebase","fromTask","task","subscriber","progress","snap","next","error","e","complete","snapshot","unsub","on","then","unsubscribe","pipe","createUploadTask","inner$","bind","catch","pause","cancel","resume","snapshotChanges","percentageChanges","s","bytesTransferred","totalBytes","createStorageRef","ref","getDownloadURL","undefined","getMetadata","delete","child","path","updateMetadata","meta","put","data","metadata","putString","format","list","options","listAll","BUCKET","MAX_UPLOAD_RETRY_TIME","MAX_OPERATION_RETRY_TIME","USE_EMULATOR","AngularFireStorage","constructor","name","storageBucket","platformId","zone","schedulers","maxUploadRetryTime","maxOperationRetryTime","_useEmulator","_appCheckInstances","app","storage","runOutsideAngular","useEmulator","setMaxUploadRetryTime","setMaxOperationRetryTime","refFromURL","upload","storageRef","ɵfac","NgZone","ɵAngularFireSchedulers","AppCheckInstances","ɵprov","type","args","providedIn","decorators","Object","GetDownloadURLPipe","cdr","state","asyncPipe","transform","_a","key","existing","get","downloadUrl$","it","set","ngOnDestroy","ChangeDetectorRef","TransferState","ɵpipe","pure","GetDownloadURLPipeModule","ɵmod","ɵinj","declarations","exports","AngularFireStorageModule","registerVersion","full","providers"],"sourceRoot":"webpack:///"}